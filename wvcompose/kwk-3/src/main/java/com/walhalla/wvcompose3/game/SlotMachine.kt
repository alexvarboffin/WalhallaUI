package com.walhalla.wvcompose3.game

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlin.random.Random

@Composable
fun SlotMachineScreen() {
    val scrollState = rememberScrollState()
    val soundEffects = rememberGameSoundEffects()
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(scrollState)
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        var credits by remember { mutableStateOf(100) }
        var isSpinning by remember { mutableStateOf(false) }
        var slot1Value by remember { mutableStateOf(0) }
        var slot2Value by remember { mutableStateOf(0) }
        var slot3Value by remember { mutableStateOf(0) }
        val scope = rememberCoroutineScope()
        
        val symbols = listOf("üçí", "üçã", "üçä", "üçá", "üíé", "7Ô∏è‚É£")

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–µ–¥–∏—Ç—ã
        Text(
            "–û–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Ç",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 24.dp)
        )
        
        Text(
            "–ö—Ä–µ–¥–∏—Ç—ã: $credits",
            style = MaterialTheme.typography.titleLarge,
            modifier = Modifier.padding(bottom = 32.dp)
        )

        // –°–ª–æ—Ç—ã
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(120.dp)
                .padding(horizontal = 16.dp),
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically
        ) {
            symbols.getOrNull(slot1Value)?.let { symbol ->
                SlotItem(symbol)
            }
            symbols.getOrNull(slot2Value)?.let { symbol ->
                SlotItem(symbol)
            }
            symbols.getOrNull(slot3Value)?.let { symbol ->
                SlotItem(symbol)
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        Button(
            onClick = {
                if (credits >= 10 && !isSpinning) {
                    credits -= 10
                    isSpinning = true
                    scope.launch {
                        // –ù–∞—á–∏–Ω–∞–µ–º –∑–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è
                        soundEffects.startSpinningSound()
                        
                        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
                        repeat(20) {
                            delay(50)
                            slot1Value = Random.nextInt(symbols.size)
                            slot2Value = Random.nextInt(symbols.size)
                            slot3Value = Random.nextInt(symbols.size)
                        }
                        
                        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –∑–≤—É–∫–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                        slot1Value = Random.nextInt(symbols.size)
                        soundEffects.playStopSound()
                        delay(200)
                        slot2Value = Random.nextInt(symbols.size)
                        soundEffects.playStopSound()
                        delay(200)
                        slot3Value = Random.nextInt(symbols.size)
                        soundEffects.playStopSound()
                        
                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è
                        soundEffects.stopSpinningSound()
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
                        var won = false
                        when {
                            slot1Value == slot2Value && slot2Value == slot3Value -> {
                                // –î–∂–µ–∫–ø–æ—Ç
                                won = true
                                credits += when(slot1Value) {
                                    5 -> 500  // 7Ô∏è‚É£
                                    4 -> 300  // üíé
                                    else -> 100
                                }
                            }
                            slot1Value == slot2Value || slot2Value == slot3Value || slot1Value == slot3Value -> {
                                // –î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                                won = true
                                credits += 20
                            }
                        }
                        
                        // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞ –µ—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏
                        if (won) {
                            soundEffects.playWinSound()
                        }
                        
                        isSpinning = false
                    }
                }
            },
            enabled = credits >= 10 && !isSpinning,
            modifier = Modifier.size(width = 200.dp, height = 60.dp)
        ) {
            if (isSpinning) {
                CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    color = MaterialTheme.colorScheme.onPrimary
                )
            } else {
                Text(
                    "–ö–†–£–¢–ò–¢–¨ (10 –∫—Ä.)",
                    style = MaterialTheme.typography.titleMedium
                )
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // –ü—Ä–∞–≤–∏–ª–∞
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text("‚Ä¢ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö 7Ô∏è‚É£ = 500 –∫—Ä–µ–¥–∏—Ç–æ–≤")
                Text("‚Ä¢ –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö üíé = 300 –∫—Ä–µ–¥–∏—Ç–æ–≤")
                Text("‚Ä¢ –¢—Ä–∏ –ª—é–±—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö = 100 –∫—Ä–µ–¥–∏—Ç–æ–≤")
                Text("‚Ä¢ –î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö = 20 –∫—Ä–µ–¥–∏—Ç–æ–≤")
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    "–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏:",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text("üçí - –í–∏—à–Ω—è")
                Text("üçã - –õ–∏–º–æ–Ω")
                Text("üçä - –ê–ø–µ–ª—å—Å–∏–Ω")
                Text("üçá - –í–∏–Ω–æ–≥—Ä–∞–¥")
                Text("üíé - –ê–ª–º–∞–∑")
                Text("7Ô∏è‚É£ - –°–µ–º—ë—Ä–∫–∞")
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    "–°–æ–≤–µ—Ç—ã:",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                Text("‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö —Å—Ç–∞–≤–æ–∫")
                Text("‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º")
                Text("‚Ä¢ –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ")
                Text("‚Ä¢ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω–∏–∑—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        Spacer(modifier = Modifier.height(32.dp))
    }
}

@Composable
private fun SlotItem(symbol: String) {
    Box(
        modifier = Modifier
            .size(80.dp)
            .clip(RoundedCornerShape(8.dp))
            .background(MaterialTheme.colorScheme.surfaceVariant),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = symbol,
            fontSize = 40.sp,
            fontWeight = FontWeight.Bold
        )
    }
} 