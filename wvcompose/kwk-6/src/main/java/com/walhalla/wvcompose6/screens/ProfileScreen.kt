package com.walhalla.wvcompose6.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.walhalla.wvcompose6.ui.theme.*

@Composable
fun ProfileScreen() {
    val scrollState = rememberScrollState()

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        DarkBackground,
                        RubyRed.copy(alpha = 0.1f),
                        DarkBackground
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(scrollState)
                .padding(16.dp)
        ) {
            // VIP —Å—Ç–∞—Ç—É—Å
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(containerColor = CardBackground)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        "üíé DIAMOND VIP",
                        color = GoldColor,
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π",
                        color = TextSecondary,
                        style = MaterialTheme.typography.bodyLarge
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        VipStat("–°—Ç–∞—Ç—É—Å", "Diamond Master")
                        VipStat("ID", "#VIP777")
                        VipStat("–£—Ä–æ–≤–µ–Ω—å", "50")
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            Text(
                "–°–¢–ê–¢–ò–°–¢–ò–ö–ê",
                color = GoldColor,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(16.dp))

            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(containerColor = CardBackground)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    StatRow("–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à", "$ 1,234,567")
                    StatRow("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à", "$ 100,000")
                    StatRow("–°–µ—Ä–∏—è –ø–æ–±–µ–¥", "7 –∏–≥—Ä")
                    StatRow("–õ—é–±–∏–º–∞—è –∏–≥—Ä–∞", "–ë–ª—ç–∫–¥–∂–µ–∫")
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            Text(
                "–î–û–°–¢–ò–ñ–ï–ù–ò–Ø",
                color = GoldColor,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(16.dp))

            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(containerColor = CardBackground)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Achievement("üéØ –°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫", "10 –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥", true)
                    Achievement("üíé VIP –ò–≥—Ä–æ–∫", "–î–æ—Å—Ç–∏–≥–Ω—É—Ç Diamond —Å—Ç–∞—Ç—É—Å", true)
                    Achievement("üëë –ö–æ—Ä–æ–ª—å –∫–∞–∑–∏–Ω–æ", "–í—ã–∏–≥—Ä—ã—à –±–æ–ª–µ–µ $1,000,000", true)
                    Achievement("üåü –õ–µ–≥–µ–Ω–¥–∞", "100 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∏–≥—Ä", false)
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // –ö–Ω–æ–ø–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
            Button(
                onClick = { /* TODO */ },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = GoldColor,
                    contentColor = DarkBackground
                ),
                shape = RoundedCornerShape(8.dp)
            ) {
                Text(
                    "–ü–û–ü–û–õ–ù–ò–¢–¨ –°–ß–ï–¢",
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

@Composable
private fun VipStat(
    label: String,
    value: String
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            label,
            color = TextSecondary,
            style = MaterialTheme.typography.bodyMedium
        )
        Text(
            value,
            color = GoldColor,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold
        )
    }
}

@Composable
private fun StatRow(
    label: String,
    value: String
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            label,
            color = TextSecondary,
            style = MaterialTheme.typography.bodyLarge
        )
        Text(
            value,
            color = WinningsGreen,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold
        )
    }
}

@Composable
private fun Achievement(
    title: String,
    description: String,
    achieved: Boolean
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                title,
                color = if (achieved) GoldColor else TextSecondary,
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Text(
                description,
                color = TextSecondary,
                style = MaterialTheme.typography.bodyMedium
            )
        }
        if (achieved) {
            Text(
                "‚úì",
                color = WinningsGreen,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
        }
    }
} 