package com.walhalla.wvcompose7.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.walhalla.wvcompose7.game.theme.*

@Composable
fun SinsScreen() {
    val sins = listOf(
        Sin(
            title = "üî• –ì–û–†–î–´–ù–Ø",
            description = "–°—Ç–∞–Ω—å –ª—É—á—à–∏–º –∏–≥—Ä–æ–∫–æ–º",
            reward = "x666 –∫ –≤—ã–∏–≥—Ä—ã—à—É"
        ),
        Sin(
            title = "üí∞ –ê–õ–ß–ù–û–°–¢–¨",
            description = "–°–æ–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–Ω–∫",
            reward = "–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ç—É—Å"
        ),
        Sin(
            title = "üòà –ü–û–•–û–¢–¨",
            description = "–ò—Å–ø—ã—Ç–∞–π –≤—Å–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è",
            reward = "VIP –¥–æ—Å—Ç—É–ø"
        ),
        Sin(
            title = "‚öîÔ∏è –ì–ù–ï–í",
            description = "–ü–æ–∫–æ—Ä–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤",
            reward = "–û—Å–æ–±—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"
        ),
        Sin(
            title = "üç∑ –ß–†–ï–í–û–£–ì–û–î–ò–ï",
            description = "–ù–∞—Å–ª–∞–¥–∏—Å—å –≤—Å–µ–º–∏ –∏–≥—Ä–∞–º–∏",
            reward = "–ë–æ–Ω—É—Å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç"
        ),
        Sin(
            title = "üíÄ –ó–ê–í–ò–°–¢–¨",
            description = "–ü—Ä–µ–≤–∑–æ–π–¥–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤",
            reward = "–≠–ª–∏—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        ),
        Sin(
            title = "üò¥ –õ–ï–ù–¨",
            description = "–ü–æ–ª—É—á–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
            reward = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏"
        )
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        DarkAbyss,
                        BloodRed.copy(alpha = 0.1f),
                        DarkAbyss
                    )
                )
            )
    ) {
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item {
                Text(
                    "–°–ú–ï–†–¢–ù–´–ï –ì–†–ï–•–ò",
                    color = HellFire,
                    style = MaterialTheme.typography.headlineLarge,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                
                Text(
                    "–ü–æ–¥–¥–∞–π—Å—è –∏—Å–∫—É—à–µ–Ω–∏—é",
                    color = TextLight,
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(bottom = 24.dp)
                )
            }

            items(sins) { sin ->
                SinCard(sin)
            }
        }
    }
}

@Composable
private fun SinCard(sin: Sin) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = DarkSurface
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                sin.title,
                color = CursedGold,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                sin.description,
                color = TextLight,
                style = MaterialTheme.typography.bodyLarge
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    "–ù–∞–≥—Ä–∞–¥–∞:",
                    color = TextLight,
                    style = MaterialTheme.typography.bodyMedium
                )
                
                Text(
                    sin.reward,
                    color = HellFire,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

private data class Sin(
    val title: String,
    val description: String,
    val reward: String
) 